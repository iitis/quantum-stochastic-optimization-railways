from QTrains import QuboVars, Parameters



def test_qubo_small():

    tvar_range =  {"A" :{1: (0.,2.), 3: (2.,4.)}, "B" : {1: (1.,3.) , 3: (3., 5.)}}

    q = QuboVars(tvar_range)

    assert q.station_indexing['A'] == {1: {0:0, 1:1, 2:2}, 3: {2:3, 3:4, 4:5}}
    
    q.dmax = 2
    q.psum = 2
    q.ppair = 2

    penalty_at = ["B"]

    timetable = {"A": {1:0, 3:2}, "B": {1:1 , 3:3}}

    q.add_objective(penalty_at, timetable)


    assert q.vars_indexing == {0: ['A', 1, 0], 1: ['A', 1, 1], 2: ['A', 1, 2], 3: ['A', 3, 2], 4: ['A', 3, 3], 5: ['A', 3, 4], 6: ['B', 1, 1], 7: ['B', 1, 2], 8: ['B', 1, 3], 9: ['B', 3, 3], 10: ['B', 3, 4], 11: ['B', 3, 5]}

    assert q.objective_dict == {(6, 6): 0.0, (7, 7): 0.5, (8, 8): 1.0, (9, 9): 0.0, (10, 10): 0.5, (11, 11): 1.0}

    q.add_sum_to_one_constrain()

    assert q.sum_constrain_dict == {(0, 0): -2, (0, 1): 2, (0, 2): 2, (1, 1): -2, (1, 0): 2, (1, 2): 2, (2, 2): -2, (2, 0): 2, (2, 1): 2, (3, 3): -2, (3, 4): 2, (3, 5): 2, (4, 4): -2, (4, 3): 2, (4, 5): 2, (5, 5): -2, (5, 3): 2, (5, 4): 2, (6, 6): -2, (6, 7): 2, (6, 8): 2, (7, 7): -2, (7, 6): 2, (7, 8): 2, (8, 8): -2, (8, 6): 2, (8, 7): 2, (9, 9): -2, (9, 10): 2, (9, 11): 2, (10, 10): -2, (10, 9): 2, (10, 11): 2, (11, 11): -2, (11, 9): 2, (11, 10): 2}

    p = Parameters()
    p.stay = 1
    p.headways = 1
    p.pass_time = {f"A_B": 1, f"A_B": 1}

    trains_paths = {1: ["A", "B"], 3: ["A", "B"]} 
    q.add_headway_constrain(p, trains_paths)

    assert q.headway_constrain == {(2, 3): 2, (3, 2): 2, (8, 9): 2, (9, 8): 2}

    q.add_passing_time_and_stay_constrain(p, trains_paths)

    assert q.passing_time_constrain == {(0, 6): 2, (6, 0): 2, (1, 6): 2, (6, 1): 2, (1, 7): 2, (7, 1): 2, (2, 6): 2, (6, 2): 2, (2, 7): 2, (7, 2): 2, (3, 9): 2, (9, 3): 2, (4, 9): 2, (9, 4): 2, (4, 10): 2, (10, 4): 2, (5, 9): 2, (9, 5): 2, (5, 10): 2, (10, 5): 2}

    q.make_qubo()

    assert len(q.qubo) == 60

    # 0: ['A', 1, 0], 1: ['A', 1, 1], 2: ['A', 1, 2], 3: ['A', 3, 2], 4: ['A', 3, 3], 5: ['A', 3, 4],
    #  6: ['B', 1, 1], 7: ['B', 1, 2], 8: ['B', 1, 3], 9: ['B', 3, 3], 10: ['B', 3, 4], 11: ['B', 3, 5]
    #           0,1,2,3,4,5,6,7,8,9,10,11
    solution = [1,0,0,1,0,0,0,1,0,0,0,1]
    assert q.check_broken_constrains(solution) == (0, 0, 0)

    # s,j,t

    assert q.qubo2int(solution) == [['A', 1, 0], ['A', 3, 2], ['B', 1, 2], ['B', 3, 5]]

    solution = [1,0,0,1,0,0,0,1,0,0,0,0]
    assert q.check_broken_constrains(solution) == (1, 0, 0)

     #          0,1,2,3,4,5,6,7,8,9,10,11
    solution = [0,0,1,1,0,0,0,0,1,0,0,1]
    assert q.check_broken_constrains(solution) == (0, 1, 0)

     #          0,1,2,3,4,5,6,7,8,9,10,11
    solution = [1,0,0,1,0,0,0,1,0,1,0,0]
    assert q.check_broken_constrains(solution) == (0, 0, 1)

def test_qubo_large():

    tvar_range =  {"PS": {1: (0., 5.)}, "MR" :{1: (3.,8.), 3: (2.,5.)}, "CS" : {1: (16.,21.) , 3: (15., 18.)}}

    q = QuboVars(tvar_range)


    assert q.station_indexing == {'PS': {1: {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5}}, 'MR': {1: {3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 11}, 3: {2: 12, 3: 13, 4: 14, 5: 15}}, 'CS': {1: {16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21}, 3: {15: 22, 16: 23, 17: 24, 18: 25}}}

    assert q.vars_indexing == {0: ['PS', 1, 0], 1: ['PS', 1, 1], 2: ['PS', 1, 2], 3: ['PS', 1, 3], 4: ['PS', 1, 4], 5: ['PS', 1, 5], 6: ['MR', 1, 3], 7: ['MR', 1, 4], 8: ['MR', 1, 5], 9: ['MR', 1, 6], 10: ['MR', 1, 7], 11: ['MR', 1, 8], 12: ['MR', 3, 2], 13: ['MR', 3, 3], 14: ['MR', 3, 4], 15: ['MR', 3, 5], 16: ['CS', 1, 16], 17: ['CS', 1, 17], 18: ['CS', 1, 18], 19: ['CS', 1, 19], 20: ['CS', 1, 20], 21: ['CS', 1, 21], 22: ['CS', 3, 15], 23: ['CS', 3, 16], 24: ['CS', 3, 17], 25: ['CS', 3, 18]}

    assert q.trains_indexing == {1: {'PS': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5}, 'MR': {3: 6, 4: 7, 5: 8, 6: 9, 7: 10, 8: 11}, 'CS': {16: 16, 17: 17, 18: 18, 19: 19, 20: 20, 21: 21}}, 3: {'MR': {2: 12, 3: 13, 4: 14, 5: 15}, 'CS': {15: 22, 16: 23, 17: 24, 18: 25}}}

    q.dmax = 5

    penalty_at = ["MR", "CS"]

    timetable =  {"PS": {1: 0}, "MR" :{1: 3, 3: 0}, "CS" : {1: 16 , 3: 13}} 

    q.add_objective(penalty_at, timetable)

    assert q.objective_dict == {(6, 6): 0.0, (7, 7): 0.2, (8, 8): 0.4, (9, 9): 0.6, (10, 10): 0.8, (11, 11): 1.0, (12, 12): 0.4, (13, 13): 0.6, (14, 14): 0.8, (15, 15): 1.0, (16, 16): 0.0, (17, 17): 0.2, (18, 18): 0.4, (19, 19): 0.6, (20, 20): 0.8, (21, 21): 1.0, (22, 22): 0.4, (23, 23): 0.6, (24, 24): 0.8, (25, 25): 1.0}


    q.psum = 2
    q.ppair = 2

    penalty_at = ["MR", "CS"]

    q.add_sum_to_one_constrain()

    assert q.sum_constrain_dict == {(0, 0): -2, (0, 1): 2, (0, 2): 2, (0, 3): 2, (0, 4): 2, (0, 5): 2, (1, 1): -2, (1, 0): 2, (1, 2): 2, (1, 3): 2, (1, 4): 2, (1, 5): 2, (2, 2): -2, (2, 0): 2, (2, 1): 2, (2, 3): 2, (2, 4): 2, (2, 5): 2, (3, 3): -2, (3, 0): 2, (3, 1): 2, (3, 2): 2, (3, 4): 2, (3, 5): 2, (4, 4): -2, (4, 0): 2, (4, 1): 2, (4, 2): 2, (4, 3): 2, (4, 5): 2, (5, 5): -2, (5, 0): 2, (5, 1): 2, (5, 2): 2, (5, 3): 2, (5, 4): 2, (6, 6): -2, (6, 7): 2, (6, 8): 2, (6, 9): 2, (6, 10): 2, (6, 11): 2, (7, 7): -2, (7, 6): 2, (7, 8): 2, (7, 9): 2, (7, 10): 2, (7, 11): 2, (8, 8): -2, (8, 6): 2, (8, 7): 2, (8, 9): 2, (8, 10): 2, (8, 11): 2, (9, 9): -2, (9, 6): 2, (9, 7): 2, (9, 8): 2, (9, 10): 2, (9, 11): 2, (10, 10): -2, (10, 6): 2, (10, 7): 2, (10, 8): 2, (10, 9): 2, (10, 11): 2, (11, 11): -2, (11, 6): 2, (11, 7): 2, (11, 8): 2, (11, 9): 2, (11, 10): 2, (12, 12): -2, (12, 13): 2, (12, 14): 2, (12, 15): 2, (13, 13): -2, (13, 12): 2, (13, 14): 2, (13, 15): 2, (14, 14): -2, (14, 12): 2, (14, 13): 2, (14, 15): 2, (15, 15): -2, (15, 12): 2, (15, 13): 2, (15, 14): 2, (16, 16): -2, (16, 17): 2, (16, 18): 2, (16, 19): 2, (16, 20): 2, (16, 21): 2, (17, 17): -2, (17, 16): 2, (17, 18): 2, (17, 19): 2, (17, 20): 2, (17, 21): 2, (18, 18): -2, (18, 16): 2, (18, 17): 2, (18, 19): 2, (18, 20): 2, (18, 21): 2, (19, 19): -2, (19, 16): 2, (19, 17): 2, (19, 18): 2, (19, 20): 2, (19, 21): 2, (20, 20): -2, (20, 16): 2, (20, 17): 2, (20, 18): 2, (20, 19): 2, (20, 21): 2, (21, 21): -2, (21, 16): 2, (21, 17): 2, (21, 18): 2, (21, 19): 2, (21, 20): 2, (22, 22): -2, (22, 23): 2, (22, 24): 2, (22, 25): 2, (23, 23): -2, (23, 22): 2, (23, 24): 2, (23, 25): 2, (24, 24): -2, (24, 22): 2, (24, 23): 2, (24, 25): 2, (25, 25): -2, (25, 22): 2, (25, 23): 2, (25, 24): 2}

    trains_paths = {1: ["PS", "MR", "CS"], 3: ["MR", "CS"]}

    p = Parameters()
    p.stay = 1
    p.headways = 2
    p.pass_time = {f"PS_MR": 2, f"MR_CS": 12}

    q.add_headway_constrain(p, trains_paths)

    assert len(q.headway_constrain) == 32

    for (k, kp) in q.headway_constrain:
        assert -2 < q.vars_indexing[k][2] - q.vars_indexing[kp][2] < 2


    q.add_passing_time_and_stay_constrain(p, trains_paths)

    assert len(q.passing_time_constrain) == 72

    for (k, kp) in q.passing_time_constrain:
        if "CS" in [ q.vars_indexing[k][0],  q.vars_indexing[kp][0] ]:
           assert -13 < q.vars_indexing[k][2] - q.vars_indexing[kp][2] < 13 
        if "PS" in [ q.vars_indexing[k][0],  q.vars_indexing[kp][0] ]:
           assert -3 < q.vars_indexing[k][2] - q.vars_indexing[kp][2] < 3

    
    q.make_qubo()
